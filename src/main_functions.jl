function main(filename)
    D = load(filename)
    ppi = D["ppi"]
    Œ¥‚Çã = D["Œ¥‚Çã"]
    T = D["T"]
    n‚Çä = D["n‚Çä"]
    para = D["para"]
    r_‚àû = D["r_‚àû"]
    ipara = D["ipara"]
    r_star = D["r_star"]
    rounding_YZ = D["rounding_YZ"]
    r_0 = D["r_0"]
    ùê§ = D["ùê§"]
    k = D["k"]
    m = D["m"]
    u_j‚Ñì = D["u_j‚Ñì"]
    Œ¥ = D["Œ¥"]
    Œ¶‚Çç‚ÇÄ‚Çé = D["Œ¶‚Çç‚ÇÄ‚Çé"]
    kŒ¶ = D["kŒ¶"]
    kŒ¶_low = D["kŒ¶_low"]
    Œ¶,Œ¶_function,Œ¥,r_Œ¥,r_C‚Å∞ = _main( u_j‚Ñì, Œ¥, ppi, T, Œ¶‚Çç‚ÇÄ‚Çé, Œ¥‚Çã, para, ipara, n‚Çä, r_star, r_0, r_‚àû, ùê§, k, m, kŒ¶, kŒ¶_low, rounding_YZ )
    return Œ¶,Œ¶_function,Œ¥,r_Œ¥,r_C‚Å∞
end

function _main(u_j‚Ñì, Œ¥,ppi, T, Œ¶‚Çç‚ÇÄ‚Çé, Œ¥‚Çã, para, ipara, n‚Çä, r_star, r_0, r_‚àû, ùê§, k, m, kŒ¶, kŒ¶_low, rounding_YZ)
    setprecision(IntervalArithmetic.Interval,512)
    setprecision(BigFloat,512)
    # Prove solutions -----------------------------------------------------
    # Initialize containers.
    Œ¥_val = Interval{T}[]
    U_j‚Ñì = Sequence{CartesianPower{Chebyshev}, Vector{T}}[]
    Œ¶ = Sequence{CartesianPower{Chebyshev}, Vector{Interval{T}}}[]
    Œ¶_low_accuracy = Sequence{CartesianPower{Chebyshev}, Vector{Interval{T}}}[]
    Œ¶_function = Array{Any}(undef,n‚Çä)   # Yes, this is inefficient.
    r_C‚Å∞ = Interval{T}[]
    r_Œ¥ = Interval{T}[]
    # First step 
    # # -- preparation.
    printstyled("::: Starting proof 1 :::\n",color = :yellow)
    push!(Œ¶,interval.(Œ¶‚Çç‚ÇÄ‚Çé))
    push!(Œ¶_low_accuracy,interval.(Œ¶‚Çç‚ÇÄ‚Çé))
    Œ¶_function[1] = convert_Chebyshev_to_callable_function(Œ¶[1])
    s_j‚Ñì = make_s_grid(k[1],m[1],ppi;T);
    push!(U_j‚Ñì,convert_matrix_to_interp(u_j‚Ñì[1],mid.(ppi)))
    println(": Entering Newton :")
    u_j‚Ñì[1],U_j‚Ñì[1],Œ¥[1],res = Newton((u_j‚Ñì[1],U_j‚Ñì[1]),Œ¥[1],mid.(s_j‚Ñì),mid.(Œ¶[1]),para,mid.(ppi),1E-20,12;Œ¥‚Çã)
    # # -- conversion to intervals, evaluation of zero-finding problem and approximate derivative.
    iu = (Interval.(u_j‚Ñì[1]),Interval.(U_j‚Ñì[1]));    iŒ¥ = Interval(Œ¥[1]);   iŒ¶ = Interval.(Œ¶[1]);   iŒ¥‚Çã = interval(Œ¥‚Çã);
    iu, iŒ¥ =  modify_candidate_zero_rightside_only(iu,iŒ¥,para;desired_tolerance=res)
    println(": Computing G, DG, A :")
    _,G = G‚Çö(iu[1],iu[2],s_j‚Ñì,iŒ¥,component(iŒ¶,1),ipara,ppi;Œ¥‚Çã=iŒ¥‚Çã);
    DG = DG‚Çö(iu,iŒ¥,s_j‚Ñì,component(iŒ¶,1:2),ipara,ppi;Œ¥‚Çã=iŒ¥‚Çã);
    A = Interval.(compute_A(DG,Float64));
    # # -- Evaluate radii polynomial.
    println(": Starting evaluation of the bounds, radii polynomials. :")
    _, _, _, _, _, _, _, _, _, _, C0_err, Œ¥_err = radpol(G,A,DG,iu,iŒ¥,iŒ¶,ipara,s_j‚Ñì,ppi,r_star[1],r_0[1],r_‚àû[1];Œ¥‚Çã=iŒ¥‚Çã,rounding_YZ);
    push!(r_C‚Å∞,C0_err)
    push!(r_Œ¥,Œ¥_err)
    push!(Œ¥_val, iŒ¥ + interval(-1,1)*r_Œ¥[1])
    # # -- Interpolate, get ready for step 2.
    println(": Starting high-accuracy interpolation. :")
    _,_,Œ¶_interp_high_accuracy = interpolate_solution_tight_D012(interval.(U_j‚Ñì[1]),interval.(Œ¥[1]),s_j‚Ñì,Œ¶[1],r_C‚Å∞[1],r_Œ¥[1],kŒ¶[1],interval(kŒ¶[1]),ùê§,ipara,ppi;Œ¥‚Çã=iŒ¥‚Çã,sdiv=10,check_large_coeffs=0)
    println(": Starting low-accuracy interpolation. :")
    _,_,Œ¶_interp_low_accuracy = interpolate_solution_tight_D012(interval.(U_j‚Ñì[1]),interval.(Œ¥[1]),s_j‚Ñì,Œ¶[1],r_C‚Å∞[1],r_Œ¥[1],kŒ¶_low[1],interval(kŒ¶_low[1]),ùê§,ipara,ppi;Œ¥‚Çã=iŒ¥‚Çã,sdiv=10,max_N=kŒ¶_low[1],check_large_coeffs=0)
    push!(Œ¶,copy(Œ¶_interp_high_accuracy))
    push!(Œ¶_low_accuracy,copy(Œ¶_interp_low_accuracy))
    println(": Building hybrid enclosure. :")
    Œ¶_function[2] = t -> evaluation_hybrid_enclosure(t,convert_Chebyshev_to_callable_function(component(Œ¶[2],1)),
                                                        Œ¥_val[1],Œ¶[1],ipara,all_derivatives(u_j‚Ñì[1],ipara,Œ¶[1],Œ¥_val[1];Œ¥‚Çã=copy(iŒ¥‚Çã));n_derivatives=ùê§,Œ¥‚Çã=copy(iŒ¥‚Çã))
    println(": Verifying monotonicity of time lag. :")
    check_lag_monotonicity(ipara,Œ¶[1],iu[2],s_j‚Ñì,Œ¥_val[1],r_C‚Å∞[1])
    println(": Calculations for proof 1 complete. :")
    # Continue....
    for n=2:n‚Çä
        printstyled("::: Starting proof $n :::\n",color = :yellow)
        s_j‚Ñì_n = make_s_grid(k[n],m[n],ppi;T)
        push!(U_j‚Ñì,convert_matrix_to_interp(u_j‚Ñì[n],mid.(ppi)))
        local C0_err, Œ¥_err, Œ¶_interp_high_accuracy, Œ¶_interp_low_accuracy
        println(": Entering Newton with low-accuracy interpolant (faster) :")
        u_j‚Ñì[n],U_j‚Ñì[n],Œ¥[n],_ = Newton((u_j‚Ñì[n],U_j‚Ñì[n]),Œ¥[n],mid.(s_j‚Ñì_n),mid.(Œ¶_low_accuracy[n]),para,mid.(ppi),1E-30,12;Œ¥‚Çã=Œ¥[n-1]) 
        Newton_tol = min(sup(r_C‚Å∞[n-1]),sup(r_Œ¥[n-1]))/(10*m[n])                                                    
        println(": Entering Newton with mixed accuracy interpolant (G - high accuracy / DG - low accuracy) :")                        
        u_j‚Ñì[n],U_j‚Ñì[n],Œ¥[n] = Newton_multiple_Phi((u_j‚Ñì[n],U_j‚Ñì[n]),Œ¥[n],mid.(s_j‚Ñì_n),mid.(Œ¶[n]),mid.(Œ¶_low_accuracy[n]),para,mid.(ppi),Newton_tol,12;Œ¥‚Çã=Œ¥[n-1])                                     
        iu_n = (Interval.(u_j‚Ñì[n]),Interval.(U_j‚Ñì[n]));    iŒ¥_n = Interval(Œ¥[n]);
        iu_n,iŒ¥_n = modify_candidate_zero(iu_n,iŒ¥_n,ipara,Œ¥_val[n-1]);
        println(": Computing G, DG, A :")
        _,G_n = G‚Çö(iu_n[1],iu_n[2],s_j‚Ñì_n,iŒ¥_n,component(Œ¶[n],1),ipara,ppi;Œ¥‚Çã=Œ¥_val[n-1],check_edges=1,rigorous_error_control=1);
        DG_n = DG‚Çö(iu_n,iŒ¥_n,s_j‚Ñì_n,component(Œ¶_low_accuracy[n],1:2),ipara,ppi;Œ¥‚Çã=Œ¥_val[n-1],rigorous_error_control=1);
        A_n = Interval.(compute_A(DG_n,Float64));
        if n<n‚Çä
            C0_err, Œ¥_err, Œ¶_interp_high_accuracy, Œ¶_interp_low_accuracy, Œ¶_function[n+1] = proof_section_radpol_interp_monotonicity( G_n,A_n,DG_n,iu_n,iŒ¥_n,Œ¶[n],Œ¶_function[n],ipara,s_j‚Ñì_n,ppi,r_star[n],r_0[n],r_‚àû[n],Œ¥_val[n-1],kŒ¶[n],kŒ¶_low[n],ùê§,rounding_YZ )
        else
            C0_err, Œ¥_err, Œ¶_interp_high_accuracy, Œ¶_interp_low_accuracy = proof_section_radpol_interp_monotonicity_nohybrid( G_n,A_n,DG_n,iu_n,iŒ¥_n,Œ¶[n],Œ¶_function[n],ipara,s_j‚Ñì_n,ppi,r_star[n],r_0[n],r_‚àû[n],Œ¥_val[n-1],kŒ¶[n],kŒ¶_low[n],ùê§,rounding_YZ )
        end
        push!(Œ¥_val, iŒ¥_n + interval(-1,1)*Œ¥_err)
        push!(r_C‚Å∞,C0_err)
        push!(r_Œ¥,Œ¥_err)
        push!(Œ¶,Œ¶_interp_high_accuracy)
        push!(Œ¶_low_accuracy,Œ¶_interp_low_accuracy)
        println(": Calculations for proof $n complete. :")
    end
    return Œ¶,Œ¶_function,Œ¥_val,r_Œ¥,r_C‚Å∞
end